#+TITLE:   +rx/Emacs-Configuration
#+AUTHOR:  rxf4e1
#+EMAIL:   rxf4e1@pm.me
#+STARTUP: overview
---
* INTRO
After many attempts to create my own emacs configuration, i think now
i’m really on the right path to find myself into this world. I found
on ~Org~ literate config and [[https://github.com/conao3/leaf.el][Leaf.el]] by ~conao3~ the base i wanted to keep
myself really organized. Now i know everything about my config, even
though i have stolen many snips of code from other configuration and
adapted it to my workflow.
* CONFIGURATION
** HEADER
#+begin_src emacs-lisp :tangle yes
  ;;; config.el --- -*- lexical-binding: t -*-
#+end_src

** CORE SYSTEM
*** Paths
#+begin_src emacs-lisp :tangle yes
  ;; Make sure emacs always start at home
  ;; (cd "~/")
  (setq-default default-directory (concat (getenv "HOME") "/"))

  ;; Make sure we are on linux
  (defconst IS-LINUX (eq system-type 'gnu/linux))

  ;; Default Directories
  (when IS-LINUX
    (defconst rx:emacs-d user-emacs-directory)
    (defconst rx:local-d    (concat rx:emacs-d ".local/"))
    (defconst rx:cache-d    (concat rx:local-d "cache/"))
    (defconst rx:temp-d     (concat rx:local-d "temp/"))
    (defconst rx:snippets-d (concat rx:emacs-d "straight/build/yasnippet-snippets/snippets/"))
    (defconst rx:skeleton-d (concat rx:local-d "skeletons/"))
    (defconst rx:projects-d (concat rx:cache-d "projects")))
#+end_src

*** Package Manager
**** Straight
#+begin_src emacs-lisp :tangle yes
  (custom-set-variables
   '(straight-vc-git-default-clone-depth 1)
   '(straight-use-package-by-default nil)
   '(straight-repository-branch "develop"))

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (require 'straight-x)
#+end_src

**** Leaf
#+begin_src emacs-lisp :tangle yes
  (eval-and-compile
    (straight-use-package 'leaf-keywords)
    (require 'leaf)
    (require 'leaf-keywords)
    (leaf-keywords-init))
#+end_src

*** Garbage Collector
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'gcmh)
  ;; ------------------
  (gcmh-mode 1)
#+end_src

*** Saves
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (require 'savehist)
  (require 'recentf)
  ;; ------------------
  (custom-set-variables
   ;; savehist
   '(savehist-file (expand-file-name "savehist" rx:temp-d))
   '(savehist-save-minibuffer-history t)
   '(savehist-additional-variables
     '(kill-ring search-ring regexp-search-ring))
   ;; recentf
   '(recentf-save-file (expand-file-name "recentf" rx:temp-d))
   '(recentf-exclude '("/tmp/" "/ssh:" "\\.?ido\\.last$" "\\.revive$" "/TAGS$"
		       "emacs\\.d/.local/cache/.+"))
   '(recentf-max-menu-items 0)
   '(recentf-max-saved-items 250)
   '(recentf-auto-cleanup 600)
   ;; backups
   '(bookmark-default-file (expand-file-name "bookmarks" rx:temp-d))
   '(bookmark-save-flag t)
   '(auto-save-list-file-name (expand-file-name "autosave" rx:temp-d))
   '(auto-save-default nil)
   ;; In case I want to reactivate backup files
   '(make-backup-files nil)
   '(create-lockfiles nil)
   '(backup-directory-alist '((".*" . ,(concat rx:temp-d "backup/"))))
   ;; Remember undo history
   '(undo-tree-auto-save-history t)
   '(undo-tree-history-directory-alist '(("." . ,(concat rx:temp-d "undo/")))))

  (savehist-mode 1)
  (recentf-mode  1)

  ;; text properties severely bloat the history so delete them (courtesy of PythonNut)
  (defun unpropertize-savehist ()
    (mapc (lambda (list)
	    (with-demoted-errors
		(when (boundp list)
		  (set list (mapcar #'substring-no-properties (eval list))))))
	  '(kill-ring minibuffer-history helm-grep-history helm-ff-history file-name-history
		      read-expression-history extended-command-history)))
  (add-hook 'kill-emacs-hook    #'unpropertize-savehist)
  (add-hook 'savehist-save-hook #'unpropertize-savehist)
#+end_src

*** Async
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'async)
  ;; ------------------
  (autoload 'dired-async-mode "dired-async.el" nil t)
  (dired-async-mode 1)
#+end_src

#+RESULTS:
: async

*** Persistent Data
**** Scratch
#+begin_src emacs-lisp :tangle yes
  ;; Make some buffers immortal
  (defun my/immortal-buffers ()
    (if (or (eq (current-buffer) (get-buffer "*scratch*"))
	    (eq (current-buffer) (get-buffer "*Messages*")))
	(progn (bury-buffer)
	       nil)
      t))

  (add-hook 'kill-buffer-query-functions 'my/immortal-buffers)
#+end_src

*** Default Settings
**** Better Customs
#+begin_src emacs-lisp :tangle yes
  ;; Save all interactive customization to a temp file, which is never loaded.
  ;; This means interactive customization is session-local. Only this init file persists sessions.
  (setq custom-file (make-temp-file "custom.el"))

  ;; For my "settings" I prefer to use custom-set-variables, which does a bunch of neat stuff.
  ;; First, it calls a variable's "setter" function, if it has one.
  ;; Second, it can activate modes as well as set variables.
  ;; Third, it takes care of setting the default for buffer-local variables correctly.
  ;; https://with-emacs.com/posts/tutorials/almost-all-you-need-to-know-about-variables/#_user_options
  ;; https://old.reddit.com/r/emacs/comments/exnxha/withemacs_almost_all_you_need_to_know_about/fgadihl/
  (custom-set-variables
   '(frame-title-format                  "%b - emacs")
   '(ad-redefinition-action              'accept)
   '(compilation-always-kill             t)
   '(compilation-ask-about-save          nil)
   '(compilation-scroll-output           t)
   '(echo-keystrokes                     0.02)
   '(ediff-diff-options                  "-w")
   '(ediff-split-window-function         'split-window-horizontally)
   '(ediff-window-setup-function         'ediff-setup-windows-plain)
   '(enable-recursive-minibuffers        nil)
   '(history-length                      500)
   '(inhibit-startup-screen              t)
   '(initial-major-mode                  'text-mode)
   '(major-mode                          'fundamental-mode)
   '(ring-bell-function                  'ignore)
   '(save-interprogram-paste-before-kill nil)
   '(sentence-end-double-space           nil)
   '(track-eol                           t)
   '(line-move-visual                    nil)
   '(require-final-newline               t)
   '(mouse-yank-at-point                 t)
   '(make-pointer-invisible              t)
   '(minibuffer-prompt-properties '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
   '(eval-expression-print-length        nil)
   '(eval-expression-print-level         nil)
   '(size-indication-mode                t)
   '(global-hl-line-mode                 t)
   '(line-number-mode                    t)
   '(column-number-mode                  t)
   ;; UTF-8 please
   '(locale-coding-system                'utf-8)
   '(set-terminal-coding-system          'utf-8)
   '(set-keyboard-coding-system          'utf-8)
   '(set-selection-coding-system         'utf-8)
   '(prefer-coding-system                'utf-8)
   '(delete-selection-mode               t)
   ;; for Corfu
   '(tab-always-indent                   'complete)
   '(completion-cycle-threshold          3))

  ;; ‘y-or-n-p
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Allow some things that emacs would otherwise confirm.
  (dolist (cmd
           '(eval-expression
             downcase-region
             upcase-region
             narrow-to-region
             set-goal-column
             dired-find-alternate-file))
    (put cmd 'disabled nil))
#+end_src

**** Keybindings
#+begin_src emacs-lisp :tangle yes
  ;; Unset annoying keys
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
  (global-unset-key (kbd "<kp-insert>"))
  (global-unset-key (kbd "<insert>"))

  ;; Set initial and usefull keybindings
  (let ((map global-map))
    (define-key map (kbd "<M-s-return>") 'newline-and-indent)
    (define-key map (kbd "<f5>")         'revert-buffer)
    (define-key map (kbd "s-=")          'text-scale-increase)
    (define-key map (kbd "s--")          'text-scale-decrease)
    (define-key map (kbd "C-x w k")      'kill-buffer-and-window))
#+end_src

**** Daemon/Server
#+begin_src emacs-lisp :tangle yes
  ;; (leaf server
  ;;   :doc "Emacs server"
  ;;   :tag "built-in"
  ;;   :config
  ;;   (progn
  ;;     (unless (server-running-p)
  ;;       (server-start))))
#+end_src

*** Aesthetics
**** Cursor
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (blink-cursor-mode -1)
  (set-face-background 'mouse "#777777")

  (custom-set-variables
   '(cursor-type 'box)
   '(mouse-avoidance-mode 'banish))

  (custom-set-faces
      '(cursor ((t (:foreground "dim-gray" :background "gold")))))
#+end_src

**** Fonts
***** Font Face
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; ------------------
  (message "Setting faces...")
  ;; Default Font
  (set-face-attribute 'default nil :font "Fira Code" :height 80)
  ;; Fixed Font Pitch
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 80)
  ;; Variable Font Pitch
  (set-face-attribute 'variable-pitch nil :font "Fira Code" :height 80 :weight 'regular)
#+end_src

***** Emojis
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'emojify)
  ;; ------------------
  (leaf emojify
    :doc "Emacs extension to display emojis"
    :url "https://github.com/iqbalansari/emacs-emojify"
    :if (window-system)
    :hook ((org-mode-hook
            text-mode-hook)))
#+end_src

**** Icons
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'all-the-icons)
  (straight-use-package 'all-the-icons-dired)
  ;; ------------------
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

**** Modeline
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'keycast)
  ;; ------------------
  (custom-set-variables
   '(mode-line-percent-position '(-3 "%p"))
   '(mode-line-position-column-line-format '(" [%l , %c] "))
   '(mode-line-compact t)
   '(mode-line-format
     '("%e"
       mode-line-front-space
       mode-line-mule-info
       mode-line-client
       mode-line-modified
       mode-line-remote
       mode-line-frame-identification
       mode-line-buffer-identification
       "  "
       mode-line-position
       "  "
       (vc-mode vc-mode)
       ;; mode-line-modes
       mode-line-misc-info
       mode-line-end-spaces))
   ;; Keycast
   '(keycast-separator-width 2)
   '(keycast-mode-line-remove-tail-elements nil)
   '(keycast-mode-line-insert-after 'mode-line-end-spaces))
  (keycast-mode-line-mode)
#+end_src

**** Themes
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; (straight-use-package 'spacemacs-theme)
  (straight-use-package 'gruber-darker-theme)
  (straight-use-package 'tao-theme)
  ;; ------------------
  ;; (load-theme 'spacemacs-dark t)
  ;; (load-theme 'gruber-darker t)
  (load-theme 'tao-yin t)
#+end_src

** MODULES
*** Completions
**** Input Completion:
***** orderless
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'orderless)
  ;; ------------------
  (custom-set-variables 
   '(orderless-component-separator " +")
   '(completion-styles '(orderless basic))
   '(completion-category-defaults nil)
   '(completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

***** iComplete
#+begin_src emacs-lisp :tangle yes
  (icomplete-mode 1)
  (custom-set-variables
   '(icomplete-separator " • ")
   '(icomplete-delay-completions-threshold 0)
   '(icomplete-max-delay-chars 0)
   '(icomplete-compute-delay 0)
   '(icomplete-show-matches-on-no-input t)
   '(icomplete-hide-common-prefix nil)
   '(icomplete-in-buffer nil)
   '(icomplete-prospects-height 1)
   '(icomplete-with-completion-tables t)
   '(icomplete-tidy-shadowed-file-names nil))

  (define-key icomplete-minibuffer-map (kbd "<tab>") #'icomplete-force-complete)
  (define-key icomplete-minibuffer-map (kbd "<down>") #'icomplete-forward-completions)
  (define-key icomplete-minibuffer-map (kbd "C-n") #'icomplete-forward-completions)
  (define-key icomplete-minibuffer-map (kbd "<up>") #'icomplete-backward-completions)
  (define-key icomplete-minibuffer-map (kbd "C-p") #'icomplete-backward-completions)
#+end_src

***** helm
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'helm)
  (straight-use-package 'helm-rg)
  ;; (straight-use-package 'helm-nixos-options)
  ;; ------------------
  (leaf helm
    :doc "Emacs framework for incremental completions and narrowing selections"
    :url "https://github.com/emacs-helm/helm"
    ;; :require (helm-config helm-bookmark helm-rg)
    :require (helm-bookmark helm-rg)
    :init
    (progn
      (helm-mode t)
      (helm-autoresize-mode t))
    :custom
    (helm-autoresize-max-height                . 30)
    (helm-autoresize-min-height                . 10)
    ;; Generic configuration.
    (helm-follow-mode-persistent               . t)
    (helm-reuse-last-window-split-state        . t)
    (helm-display-header-line                  . nil)
    (helm-findutils-search-full-path           . t)
    (helm-show-completion-display-function     . nil)
    (helm-completion-mode-string               . "")
    (helm-dwim-target                          . 'completion)
    (helm-echo-input-in-header-line            . t)
    (helm-use-frame-when-more-than-two-windows . nil)
    (helm-grep-save-buffer-name-no-confirm     . t)
    ;; Fuzzy everywhere
    (helm-M-x-fuzzy-match                      . t)
    (helm-apropos-fuzzy-match                  . t)
    (helm-buffers-fuzzy-matching               . t)
    (helm-completion-in-region-fuzzy-match     . t)
    (helm-eshell-fuzzy-match                   . t)
    (helm-imenu-fuzzy-match                    . t)
    (helm-locate-library-fuzzy-match           . t)
    (helm-recentf-fuzzy-match                  . t)
    (helm-scroll-amount                        . 8)
    (helm-split-window-in-side-p               . nil)
    ;; To prevent M-s f from directly going to symbol at point if in same buffer.
    (helm-imenu-execute-action-at-once-if-one  . nil)
    ;; https://github.com/emacs-helm/helm/issues/1910
    (helm-buffers-end-truncated-string         . "…")
    (helm-buffer-max-length                    . 22)
    ;; Default needs special font
    (helm-ff-cache-mode-lighter                . " ⚒")
    (helm-ff-keep-cached-candidates            . nil)
    (helm-window-show-buffers-function         . 'helm-window-mosaic-fn)
    (helm-window-prefer-horizontal-split       . t)
    ;; Make `helm-mini' almighty.
    (helm-mini-default-sources . `(helm-source-buffers-list
                                   helm-source-recentf
                                   ,(when (boundp 'helm-source-ls-git)
                                      'helm-source-ls-git)
                                   helm-source-bookmarks
                                   helm-source-bookmark-set
                                   helm-source-buffer-not-found))
    :config
    (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
    (helm-top-poll-mode)
    ;; Fallback on 'find' if 'locate' is not available.
    (unless (executable-find "locate")
      (setq helm-locate-recursive-dirs-command "find %s -type d -regex .*%s.*$"))
    :bind
    (("C-x c"   . nil)
     ("C-c h"   . helm-command-prefix)
     ("C-x b"   . helm-mini)
     ("C-s"     . helm-occur)
     ("C-x C-f" . helm-find-files)
     ("M-x"     . helm-M-x)
     (:helm-map
      ([tab] . helm-execute-persistent-action)
      ("TAB" . helm-execute-persistent-action)
      ("C-i" . helm-execute-persistent-action)
      ("C-a" . helm-select-action))))
#+end_src

***** brotherhood
****** vertico
#+begin_src emacs-lisp :tangle no
    ;; ------------------
    (straight-use-package 'vertico)
    (straight-use-package 'orderless)
    ;; ------------------
    (leaf vertico
      :doc "vertical completion UI based on the default completion system." 
      :url "https://github.com/minad/vertico"
      :init (vertico-mode)
      :custom
      (vertico-scroll-margin . 0)
      (vertico-count         . 10)
      (vertico-resize        . nil)
      (vertico-cycle         . t)
      :bind (:vertico-map
             ("?" . minibuffer-completion-help)
             ("M-RET" . minibuffer-force-complete-and-exit)
             ("M-TAB" . minibuffer-complete)))

    (leaf orderless ;; TO FIX
      :doc "divides the pattern into space-separated components."
      :url "https://github.com/oantolin/orderless"
      :custom
      (orderless-component-separator . " +")
      (completion-styles . '(basic orderless))
      (completion-category-defaults . nil)
      (completion-category-overrides
       . '((file (styles . (basic partial-completion)))
           (project-file (styles . (basic substring partial-completion orderless)))
           (imenu (styles . (basic substring orderless)))
           (kill-ring (styles . (basic substring orderless)))
           (consult-location (styles . (basic substring orderless))))))
#+end_src

****** marginalia
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'marginalia)
  ;; ------------------
  (leaf marginalia
    :doc "marks or annotations placed at the margin of the minibuffer."
    :url "https://github.com/minad/marginalia"
    :init (marginalia-mode)
    :custom
    (marginalia-max-relative-age . 0))
#+end_src

****** consult
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'consult)
  (straight-use-package 'consult-dir)
  ;; ------------------
  (leaf consult
    :doc "practical commands based on the Emacs completion function."
    :url "https://github.com/minad/consult"
    :hook (completion-list-mode-hook . consult-preview-at-point-mode)
    :custom
    (register-preview-delay . 0.5)
    (register-preview-function . #'consult-register-format)
    (xref-show-xrefs-function . #'consult-xref)
    (xref-show-definitions-function . #'consult-xref)
    (consult-narrow-key . "<")
    :config
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key "M-.")
    :bind
    (("C-c h" . consult-history)
     ("C-c m" . consult-mode-command)
     ("C-c k" . consult-kmacro)
     ;; C-x bindings (ctl-x-map)
     ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
     ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
     ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
     ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
     ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
     ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
     ;; Other custom bindings
     ([remap yank-pop] . consult-yank-pop)	                               ;; orig. yank-pop
     ([remap apropos] . consult-apropos)                                   ;; orig. apropos-command
     ;; M-g bindings (goto-map)
     ("M-g e" . consult-compile-error)
     ("M-g f" . consult-flymake)                      	               ;; Alternative: consult-flycheck
     ([remap goto-line] . consult-goto-line)                               ;; orig. goto-line
     ("M-g M-g" . consult-goto-line)                                       ;; orig. goto-line
     ("M-g o" . consult-outline)	                                       ;; Alternative: consult-org-heading
     ("M-g m" . consult-mark)
     ("M-g k" . consult-global-mark)
     ([remap imenu] . consult-imenu)
     ("M-g I" . consult-imenu-multi)
     ;; M-s bindings (search-map)
     ("M-s d" . consult-find)
     ("M-s D" . consult-locate)
     ("M-s g" . consult-grep)
     ("M-s G" . consult-git-grep)
     ("M-s r" . consult-ripgrep)
     ("C-s"   . consult-line)
     ("M-s L" . consult-line-multi)
     ([remap multi-occur] . consult-multi-occur)
     ("M-s k" . consult-keep-lines)
     ("M-s u" . consult-focus-lines)
     ;; Isearch integration
     ("M-s e" . consult-isearch-history)
     (:isearch-mode-map
      ("M-e" . consult-isearch-history)
      ("M-s e" . consult-isearch-history)
      ("M-s l" . consult-line)
      ("M-s L" . consult-line-multi))
     (:minibuffer-local-map
      ("M-s" . consult-history)
      ("M-r" . consult-history))))

  (leaf consult-dir
    :doc ""
    :url ""
    :after consult
    :bind (("C-x C-d" . consult-dir)
           (:minibuffer-local-completion-map
            ("C-x C-d" . consult-dir)
            ("C-x C-j" . consult-dir-jump-file))))
#+end_src

****** embark
#+begin_src emacs-lisp :tangle yes 
  ;; ------------------
  (straight-use-package 'embark)
  ;; (straight-use-package 'embark-consult)
  ;; (straight-use-package 'citar-embark)
  ;; ------------------
  (leaf embark
    :doc "makes it easy to choose a command to run based on what is near point."
    :url "https://github.com/oantolin/embark"
    :bind (("C-." . embark-act)
           ("C-;" . embark-dwin)
           ("C-h b" . embark-bindings))
    :config
    (setq embark-action-indicator
            (lambda (map &optional _target)
              (which-key--show-keymap "Embark" map nil nil 'no-paging)
              #'which-key--hide-popup-ignore-command)
            embark-become-indicator embark-action-indicator)
      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none))))
      (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
    '(embark-which-key-indicator
      embark-highlight-indicator
      embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
        (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator))

  (leaf embark-consult
    :doc ""
    :disabled t
    :url ""
    :after (embark consult)
    :hook (embark-collect-mode-hook . consult-preview-at-point-mode))

  (leaf citar-embark
    :doc ""
    :url ""
    :disabled t
    :after citar embark
    :config
    (citar-embark-mode))
#+end_src

**** Text Completion:
***** company
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'company)
  ;; ------------------
  (leaf company
    :doc ""
    :url ""
    :init (global-company-mode)
    :custom
    (company-idle-delay . 0.5)
    (company-show-numbers . t)
    (company-tooltip-limit . 10)
    (company-minimum-prefix-length . 2)
    (company-tooltip-align-annotations . t)
    (company-tooltip-flip-when-above . t))
#+end_src

***** corfu
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package
   '(corfu :files (:defaults "extensions/*.el")))
  (straight-use-package 'cape)
  ;; ------------------
  (custom-set-variables
   '(completion-style '(orderless basic))
   '(corfu-popupinfo-delay nil)
   '(corfu-echo-documentation nil)
   '(corfu-quit-at-boundary t)
   '(corfu-separator ?_)
   '(corfu-quit-no-match t)
   '(corfu-cycle t)
   '(corfu-auto t)
   '(corfu-auto-delay 1)
   '(corfu-auto-prefix 2)
   '(corfu-scroll-margin 5))

  (with-eval-after-load 'corfu
    (let ((map corfu-map))
      (define-key map (kbd "C-s") #'corfu-quit)
      (define-key map (kbd "M-n") #'corfu-popupinfo-scroll-up)
      (define-key map (kbd "M-p") #'corfu-popupinfo-scroll-down))
    (add-to-list 'completion-at-point-functions #'cape-file))

  (global-corfu-mode)
  (corfu-popupinfo-mode)
#+end_src

***** hippie-expand
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; ------------------
  (custom-set-variables
   '(hippie-expand-try-functions-list
     '(yas-hippie-try-expand
       try-expand-all-abbrevs
       try-expand-dabbrev
       try-expand-dabbrev-visible
       try-completion
       try-expand-line
       try-expand-list
       try-complete-file-name
       try-complete-file-name-partially
       try-complete-lisp-symbol
       try-complete-lisp-symbol-partially)))

  (define-key global-map (kbd "M-/") #'hippie-expand)
#+end_src

***** lsp
****** eglot
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'eglot)
  ;; ------------------
  (require 'project)
  (custom-set-variables
   '(eglot-ignored-server-capabilites '(:documentHighlightProvider))
   '(eglot-sync-connect 1)
   '(eglot-connect-timeout 10)
   '(eglot-autoshutdown nil)
   '(eglot-send-changes-idle-time 0.5)
   '(eglot-auto-display-help-buffer nil))

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs '(nix-mode . ("nil")))
    (define-key eglot-mode-map (kbd "C-c l r") #'eglot-rename)
    (define-key eglot-mode-map (kbd "C-c l o") #'eglot-code-action-organize-imports)
    (define-key eglot-mode-map (kbd "C-c l h") #'eldoc)
    (define-key eglot-mode-map (kbd "M-?") #'xref-find-definitions))
#+end_src

****** lsp-mode
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'lsp-mode)
  (straight-use-package 'lsp-ui)
  ;; (straight-use-package 'lsp-nix)
  ;; ------------------
  (leaf lsp-mode
    :doc ""
    :url ""
    :commands lsp
    :hook (lsp-ui-mode)
    :custom
    (lsp-eldoc-render-all . nil)
    (lsp-idle-delay . 0.6)
    ;; enable / disable the hints as you prefer:
    (lsp-rust-analyzer-server-display-inlay-hints . t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable . "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints . t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names . nil)
    (lsp-rust-analyzer-display-closure-return-type-hints . t)
    (lsp-rust-analyzer-display-parameter-hints . nil)
    (lsp-rust-analyzer-display-reborrow-hints . nil))

  (leaf lsp-ui
    :doc ""
    :url ""
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show . t)
    (lsp-ui-slideline-show-hover . t)
    (lsp-ui-doc-enable . nil))

  (leaf lsp-nix
    :doc ""
    :url ""i
    :disabled t
    :ensure lsp-mode
    :after (lsp-mode)
    :custom 
    (lsp-nix-nil-formatter ["alexandra"]))
#+end_src

***** snippets
****** skeleton
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  ;; ------------------
  (leaf skeleton
    :doc ""
    :tag "built-in"
    :disabled t
    :require init-skeletons)
#+end_src

****** yasnippet
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'yasnippet)
  (straight-use-package 'yasnippet-snippets)
  ;; ------------------
  (leaf yasnippet
    :doc "YASnippet is a template system for Emacs"
    :url "https://github.com/joaotavora/yasnippet"
    :require (yasnippet-snippets)
    :custom (yas-snippet-dirs . '(rx:snippets-d))
    :config
    (progn
      (yas-reload-all)
      (add-hook 'prog-mode-hook #'yas-minor-mode)))
#+end_src

*** Editor
**** Anzu
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'anzu)
  ;; ------------------
  (custom-set-variables
   '(anzu-modelighter "")
   '(anzu-deactivate-region t)
   '(anzu-search-threshold 1000)
   '(anzu-replace-threshold 50)
   '(anzu-replace-to-string-separator " => "))

  (define-key global-map (kbd "C-c a q") #'anzu-query-replace)
  (define-key global-map (kbd "C-c a r") #'anzu-query-replace-regexp)
  (define-key global-map (kbd "C-c a c") #'anzu-query-replace-at-cursor)

  (global-anzu-mode t)
#+end_src

**** Crux
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'crux)
  ;; ------------------
  (with-eval-after-load 'crux
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer 'crux-rename-file-and-buffer))

  (let ((map global-map))
    (define-key map [?\C-a] #'crux-move-beginning-of-line)
    (define-key map [?\C-x ?4 ?t] #'crux-transpose-windows)
    (define-key map [?\C-k] #'crux-kill-whole-line)
    (define-key map [?\C-c ?c ?\;] #'crux-duplicate-and-comment-current-line-or-region)
    (define-key map [?\C-c ?c ?c] #'crux-cleanup-buffer-or-region)
    (define-key map [?\C-c ?c ?d] #'crux-duplicate-current-line-or-region)
    (define-key map [?\C-c ?c ?f] #'crux-recentf-find-file)
    (define-key map [?\C-c ?c ?F] #'crux-recentf-find-directory)
    (define-key map [?\C-c ?c ?k] #'crux-kill-other-buffers)
    (define-key map [?\C-c ?c ?r] #'crux-reopen-as-root-mode)
    (define-key map [?\C-c ?c ?t] #'crux-visit-term-buffer)
    (define-key map [?\s-o] #'crux-smart-open-line-above))
#+end_src

**** Diff
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'diff-hl)
  ;; ------------------
  (leaf diff-hl
    :doc ""
    :url ""
    :init (global-diff-hl-mode))
#+end_src

**** Dired
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'dired-subtree)
  (straight-use-package 'diredfl)
  (straight-use-package 'dired-sidebar)
  ;; ------------------
  (require 'dired-subtree)
  (require 'diredfl)
  (custom-set-variables
   '(dired-listing-switches "-lGhA1vDpX --group-directories-first")
   '(dired-recursive-copies 'always)
   '(dired-recursive-deletes 'always)
   '(delete-by-moving-to-trash t)
   '(dired-dwim-target t)
   '(dired-subtree-use-backgrounds nil))

  (add-hook 'dired-mode-hook 'dired-hide-details-mode)

  (global-unset-key (kbd "C-x d"))
  (define-key global-map (kbd "C-x d d") #'dired)
  (define-key global-map (kbd "C-x d s") #'dired-sidebar-toggle-sidebar)
  (define-key dired-mode-map (kbd "<tab>") #'dired-subtree-toggle)
  (define-key dired-mode-map (kbd "<C-tab>") #'dired-subtree-cycle)
  ;; (define-key dired-mode-map (kbd "w") #'wdired-change-to-wdired-mode)
  (define-key dired-mode-map (kbd "<M-RET>") #'dired-open-file)
  (define-key dired-mode-map "b" (lambda ()
                                       (interactive)
                                       (find-alternate-file "..")))
  (defun dired-open-file ()
    "In dired, open the file named on this line."
    (interactive)
    (let* ((file (dired-get-filename nil t)))
      (message "Opening %s..." file)
      (call-process "xdg-open" nil 0 nil file)
      (message "Opening %s done" file)))

  (defun sidebar-toggle ()
    "Toggle both `dired-sidebar’ and `ibuffer-sidebar’"
    (interactive)
    (dired-sidebar-toggle-sidebar))
#+end_src

**** Easy-Kill
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'easy-kill)
  ;; ------------------
  (leaf easy-kill
    :doc ""
    :url ""
    :bind
    (([remap kill-ring-save] . easy-kill)
     ([remap mark-sexp] . easy-mark)))
#+end_src

**** EditorConfig
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'editorconfig)
  ;; ------------------
  (editorconfig-mode 1)
#+end_src

**** Environment
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'direnv)
  (straight-use-package 'exec-path-from-shell)
  ;; ------------------
  (custom-set-variables
   '(direnv-always-show-summary nil)
   '(direnv-show-paths-in-summary nil)
   '(exec-path-from-shell-variables
     '("PATH" "MANPATH" "NIX_PATH" "NIX_SSL_CERT_FILE")))
  (direnv-mode t)
#+end_src

**** Expand-Region
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'expand-region)
  ;; ------------------
  (define-key global-map (kbd "C-=") #'er/expand-region)
  (define-key global-map (kbd "C-+") #'er/expand-region)
#+end_src

**** Git
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'magit)
  ;; ------------------
  (define-key global-map (kbd "C-x g s") #'magit-status)
#+end_src

**** ibuffer
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; ------------------
  (custom-set-variables
   '(ibuffer-show-empty-filter-groups nil)
   '(ibuffer-expert t)
   '(ibuffer-saved-filter-groups
     '(("default"
        ("EMACS CONFIG"
         (filename . ".emacs.d/config"))
        ("EMACS LISP"
         (mode . emacs-lisp-mode))
        ("DIRED"
         (mode . dired-mode))
        ("ORG"
         (mode . org-mode))
        ("WEBDEV"
         (or
          (mode . html-mode)
          (mode . css-mode)
          (mode . js-mode)
          (mode . ts-mode)))
        ("EPUB/PDF"
         (or
          (mode . pdf-view-mode)
          (mode . nov-mode)))
        ("EWW"
         (mode . eww-mode))
        ("HELM"
         (mode . helm-major-mode))
        ("HELP"
         (or
          (name . "\*Help\*")
          (name . "\*Apropos\*")
          (name . "\*info\*")
          (name . "\*Warnings\*")))
        ("SPECIAL BUFFERS"
         (or
          (name . "\*scratch\*")
          (name . "\*Messages\*")
          (name . "\*straight-process\*")
          (name . "\*direnv\*")))))))

  (add-hook 'ibuffer-mode-hook (lambda ()
                                  (ibuffer-auto-mode t)
                                  (ibuffer-switch-to-saved-filter-groups "default")))

  (define-key global-map (kbd "C-x C-b") 'ibuffer)
#+end_src

**** iSearch
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; ------------------
  (custom-set-variables
   '(search-highlight t)
   '(search-whitespace-regexp ".*?")
   '(isearch-lax-whitespace t)
   '(isearch-regexp-lax-whitespace nil)
   '(isearch-lazy-highlight t)
   '(isearch-lazy-count t)
   '(lazy-count-prefix-format nil)
   '(lazy-count-suffix-format " (%s/%s)")
   '(isearch-yank-on-move 'shift)
   '(isearch-allow-scroll 'unlimited)
   '(isearch-repeat-on-direction-change t)
   '(lazy-highlight-initial-delay 0.5)
   '(lazy-highlight-no-delay-length 3)
   '(isearch-wrap-pause t))

  (define-key global-map (kbd "C-s") #'isearch-forward-regexp)
  (define-key global-map (kbd "C-M-s") #'isearch-forward)
#+end_src

**** Modal
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'meow)
  (straight-use-package 'key-chord)
  ;; ------------------
  (require 'meow)
  (require 'key-chord)
  (require 'qwerty-layout)

  (custom-set-variables
   '(meow-visit-sanitize-completion nil)
   '(meow-esc-delay 0.001)
   '(meow-select-on-change t)
   '(meow-cursor-type-normal 'box)
   '(meow-cursor-type-insert 'bar)
   '(meow-cursor-type-keypad 'hbox)
   '(meow-selection-command-fallback
     '((meow-replace . meow-page-up)
       (meow-change  . meow-change-char)
       (meow-save    . meow-save-empty)
       (meow-kill    . meow-C-k)
       (meow-cancel  . keyboard-quit)
       (meow-pop     . meow-pop-grab)
       (meow-delete  . meow-C-d))))

  (progn
    (setq key-chord-two-keys-delay 0.5)
    (key-chord-define meow-insert-state-keymap "jj" 'meow-insert-exit)
    (key-chord-define meow-insert-state-keymap "kj" 'meow-insert-exit)
    (key-chord-mode 1)
    (meow-esc-mode 1)
    (meow-setup))

  (meow-global-mode t)
#+end_src

**** MoveText
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'move-text)
  ;; ------------------
  (move-text-default-bindings)
#+end_src

**** NeoTree
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'neotree)
  ;; ------------------
  (leaf neotree
    :doc "A Emacs tree plugin like NerdTree for Vim"
    :url "https://github.com/jaypei/emacs-neotree"
    :custom
    (neo-theme . 'arrow)
    :config
    (progn
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
    :hook (neotree-mode-hook . hl-line-mode)
    :bind
    (("<f1>"   . neotree-toggle)
     ("<M-f1>" . neotree-dir)))
#+end_src

**** Parenthesis
***** rainbow
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'rainbow-delimiters)
  ;; ------------------
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

***** electric-pair
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; ------------------
  (custom-set-variables
   '(electric-quote-context-sensitive t)
   '(electric-quote-paragraph t)
   '(electric-quote-string nil)
   '(electric-quote-replace-double t)
   '(show-paren-style 'mixed)
   '(show-paren-when-point-in-periphery nil)
   '(show-paren-when-point-inside-paren t)
   '(show-paren-context-when-offscreen 'child-frame) ; Emacs 29
   ;; '(electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
   '(electric-pair-preserve-balance t)
   '(electric-pair-skip-whitespace nil)
   '(electric-pair-skip-self 'electric-pair-default-skip-self)
   '(electric-pair-skip-whitespace-chars '(9 10 32))
   '(electric-pair-pairs
     '((34   . 34)
       (8216 . 8217)
       (8220 . 8221)
       (171  . 187))))

  (electric-pair-mode nil)
  (electric-indent-mode nil)
  (electric-quote-mode nil)
  (add-hook 'after-init-hook #'show-paren-mode)
  (add-hook 'prog-mode-hook #'electric-indent-local-mode)
  (add-hook 'text-mode-hook #'electric-indent-local-mode)
#+end_src

***** smartparens
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'smartparens)
  ;; ------------------
  (require 'smartparens-config)
  (custom-set-variables
   '(smartparens-strict-mode nil))
  (add-hook 'prog-mode-hook 'smartparens-mode)
#+end_src

**** Projects
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; (straight-use-package 'projectile)
  ;; ------------------
  ;; (custom-set-variables
  ;;  '(projectile-switch-project-action 'projectile-dired))
  ;; (define-key global-map (kbd "C-c p") #'projectile-command-map)
  ;; (projectile-mode nil)
#+end_src

**** RegExp
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'visual-regexp)
  (straight-use-package 'visual-regexp-steroids)
  ;; ------------------
  (leaf visual-regexp
    :doc ""
    :url ""
    :require visual-regexp-steroids
    :bind (("C-c f" . 'vr/isearch-forward)
           ("C-c b" . 'vr/isearch-backward)))
#+end_src

**** Scroll
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; ------------------
  (custom-set-variables
   '(hscroll-margin 1)
   '(hscroll-step 1)
   '(scroll-conservatively 100000)
   '(scroll-margin 8)
   '(scroll-preserve-screen-position 1))
#+end_src

**** Sideline
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'sideline)
  (straight-use-package 'sideline-flymake)
  ;; ------------------
  (leaf sideline
    :doc "Display information either on the left/right side of the buffer window."
    :url "https://github.com/emacs-sideline/sideline"
    :hook flymake-mode
    :custom
    (sideline-display-backend-name . t))

  (leaf sideline-flymake
    :doc ""
    :url ""
    :hook flymake-mode
    :custom
    (sideline-backends-right . '(sideline-flymake))
    (sideline-flymake-display-mode . 'line))
#+end_src

**** Teminals
***** ansi-term
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'xterm-color)
  ;; ------------------
#+end_src

***** eshell
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'eshell-fringe-status)
  ;; ------------------
  (setenv "PAGER" "cat")

  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  (add-hook 'eshell-before-prompt-hook
            (lambda ()
              (setq xterm-color-preserve-properties t)))

  (setq eshell-prompt-function
        (lambda ()
          (concat (format-time-string "%Y-%m-%d %H:%M" (current-time))
                  (if (= (user-uid) 0) " # " " λ "))))

  (setq eshell-directory-name (concat rx:temp-d "eshell/")
        eshell-aliases-file   (concat eshell-directory-name "aliases"))

  (custom-set-variables
   '(eshell-prompt-regexp                    "^[^λ]+ λ ")
   '(eshell-history-size                     1024)
   '(eshell-buffer-maximum-lines             10000)
   '(eshell-hist-ignoredups                  t)
   '(eshell-highlight-prompt                 t)
   '(eshell-prefer-lisp-functions            nil)
   '(eshell-scroll-to-bottom-on-input        'all)
   '(eshell-error-if-no-glob                 t)
   '(eshell-destroy-buffer-when-process-dies t))

  (defun +rx/eshell/clear ()
    "Clear the eshell buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))

  (add-hook 'eshell-mode-hook
            (lambda ()
              (add-to-list 'eshell-visual-commands "ssh")
              (add-to-list 'eshell-visual-commands "tail")
              (add-to-list 'eshell-visual-commands "top")
              ;; Aliases
              (eshell/alias "clear" "+rx/eshell/clear")))

  (add-hook 'eshell-mode-hook 'eshell-fringe-status-mode)
#+end_src

***** vterm
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'vterm)
  ;; ------------------
  (define-key global-map (kbd "s-<return>") #'vterm-other-window)
#+end_src

**** Transient
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'transient)
  ;; ------------------
  (leaf transient
    :doc "An infix arguments and suffix commands"
    :url "https://github.com/magit/transient"
    :custom
    (transient-values-file      . rx:cache-d)
    (transient-default-level    . 5)
    (transient-mode-line-format . nil))
#+end_src

**** Undo
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'undo-fu)
  (straight-use-package 'vundo)
  ;; ------------------
  (with-eval-after-load 'vundo
    (setq vundo-glyph-alist vundo-unicode-symbols)
    (set-face-attribute 'vundo-default nil :family "Symbola"))

  (let ((map global-map))
    (define-key map (kbd "C-x u") #'vundo)
    (define-key map (kbd "C-/") #'undo-fu-only-undo)
    (define-key map (kbd "C-S-/") #'undo-fu-only-redo))
#+end_src

**** uniquify
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (require 'uniquify)
  ;; ------------------
  (custom-set-variables
   '(uniquify-buffer-name-style 'reverse)
   '(uniquify-separator " • ")
   '(uniquify-after-kill-buffer-p t)
   '(uniquify-ignore-buffers-re "^\\*"))
#+end_src

**** wich-key
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'which-key)
  ;; ------------------
  (custom-set-variables
   '(which-key-idle-delay 2)
   '(which-key-show-early-on-C-h t)
   '(which-key-show-major-mode t)
   '(which-key-popup-type 'minibuffer)
   '(which-key-side-window-location 'bottom)
   '(which-key-sort-order 'which-key-local-then-key-order))
  (which-key-mode t)
#+end_src

*** Window Manager
**** Moving Around
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'ace-window)
  ;; ------------------

  (setq aw-keys '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9))

  (let ((map global-map))
    (define-key map (kbd "s-w") #'ace-window)
    (define-key map [remap other-window] #'ace-window)
    (define-key map (kbd "C-;") #'avy-goto-char)
    (define-key map (kbd "s-.") #'avy-goto-word-or-subword-1))
#+end_src

**** Resizing
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'windresize)
  ;; ------------------
  (leaf windresize
    :doc "Self explanatory"
    :url "http://elpa.gnu.org/packages/windresize.html"
    :bind ("C-c w r" . windresize))
#+end_src

**** Shackle
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; ------------------
  (customize-set-variable
   'display-buffer-alist
   '(("\\*e?shell\\*"
      (display-buffer-in-side-window)
      (window-height . 0.3)
      (side . bottom)
      (slot . 1))
     ("\\*vterm\\*"
      (display-buffer-in-side-window)
      (window-width . 0.3)
      (side . right)
      (slot . 1))
     ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|[Hh]elp\\Messages\\)\\*"
      (display-buffer-in-side-window)
      (window-height . 0.25)
      (side . bottom)
      (slot . 0))
     ("\\*Faces\\*"
      (display-buffer-in-side-window)
      (window-height . 0.25)
      (side . bottom)
      (slot . 1))
     ("\\*contents\\*"
      (display-buffer-in-side-window)
      (window-height . 0.25)
      (side . bottom)
      (slot . 2))))
#+end_src

**** Splitting
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

  (global-set-key (kbd "s-k") 'kill-buffer-and-window)
#+end_src

**** MemInfo
#+begin_src emacs-lisp :tangle no
  (straight-use-package 'symon)

  ;; (custom-set-variables
  ;;  '(symon-sparkline-type 'gridded))
#+end_src

** CODE
*** Langs
**** haskell
#+begin_src emacs-lisp :tangle yes
  (straight-use-package 'haskell-mode)

  (add-hook 'haskell-mode-hook 'eglot-ensure)
#+end_src

**** lisp
***** clojure
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'cider)
  (straight-use-package 'clojure-mode)
  ;; ------------------
  (leaf cider
    :doc ""
    :url ""
    :custom
    (cider-repl-result-prefix . ";; => ")
    (cider-eval-result-prefix . "")
    (cider-connection-message-fn . nil)
    (cider-use-overlays . nil)
    (cider-repl-display-help-banner . nil))

  (leaf clojure-mode
    :doc ""
    :url ""
    :hook (clojure-mode-hook . subword-mode))
#+end_src

***** common-lisp
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'slime)
  ;; ------------------
  (leaf slime
    :doc ""
    :url "")
#+end_src

***** TODO elisp
***** scheme
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'geiser)
  ;; ------------------
  (leaf geiser
    :doc "Scheme interpreters to keep the Lisp Machine Spirit alive"
    :url "http://www.nongnu.org/geiser/"
    :custom
    (geiser-repl-history-filename  . rx:temp-d))
#+end_src

**** lua
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'lua-mode)
  ;; ------------------
  (add-to-list 'auto-mode-alist '("\\.lua\\’" . lua-mode))
#+end_src

**** nix
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'nix-mode)
  ;; ------------------
  (add-to-list 'auto-mode-alist '("\\.nix\\’" . nix-mode))
#+end_src

**** perl
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'cperl-mode)
  ;; ------------------
  (leaf cperl-mode
    :doc ""
    :url ""
    :mode
    ("\\.\\([pP][Llm]\\|al\\)\\'" . cperl-mode)
    :setq
    (cperl-indent-level               . 3)
    (cperl-close-paren-offset         . -3)
    (cperl-continued-statement-offset . 3)
    (cperl-indent-parens-as-block     . t)
    (cperl-tab-always-indent          . t))
#+end_src

**** purescript
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'purescript-mode)
  ;; (straight-use-package 'psc-ide)
  ;; ------------------
  (autoload 'purescript-mode "purescript-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.purs\\’" . purescript-mode))
  (add-hook 'purescript-mode-hook '(lambda ()
                                     ;; (psc-ide-mode)
                                     (eglot-ensure)
                                     (flymake-mode)
                                     (turn-on-purescript-indentation)))
#+end_src

**** rust
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; (straight-use-package 'rust-mode)
  (straight-use-package 'rustic)
  ;; ------------------
  (custom-set-variables
   '(rustic-lsp-client 'eglot)
   '(rust-format-on-save t))
  (add-hook 'rustic-mode-hook 'eglot-ensure)
#+end_src

**** webdev
***** emmet
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'emmet-mode)
  ;; ------------------
  (custom-set-variables
   '(emmet-insert-flash-time 0.1)
   '(emmet-move-cursor-between-quote t)
   '(emmet-insert-flash-time 0.001))

  (with-eval-after-load 'emmet
    (define-key emmet-mode-keymap (kbd "M-e") #'emmet-expand-line))
#+end_src

***** javascript
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'typescript-mode)
  (straight-use-package 'deno-fmt)
  ;; ------------------
  (leaf typescript-mode
    :doc "Editing Typescript-files in GNU Emacs"
    :url "https://github.com/emacs-typescript/typescript.el"
    :mode
    (("\\.[tj]s\\'"  . typescript-mode)
     ("\\.[tj]sx\\'" . typescript-mode))
    :interpreter (deno) ;; (node)
    :hook
    (typescript-mode-hook . eglot-ensure))

  (leaf deno-fmt
    :doc "Formats the current buffer on save with deno fmt"
    :url "https://github.com/rclarey/deno-emacs"
    :bind
    (:typescript-mode-map
     ("C-c d f" . deno-fmt)))
#+end_src

***** vue
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  ;; (straight-use-package 'vue-mode)
  ;; ------------------
  ;; (leaf vue-mode
  ;;   :doc ""
  ;;   :url ""
  ;;   :require
  ;;   (vue-mode web-mmode)
  ;;   :custom
  ;;   (mmm-submode-decoration-level . 0)
  ;;   :init
  ;;   (progn
  ;;     (define-derived-mode rx-vue-mode web-mode "rxVue"
  ;;       "A major mode derived from web-mode, for editing .vue files with LSP support.")
  ;;     (add-to-list 'auto-mode-alist '("\\.vue\\'" . rx-vue-mode)))
  ;;   :mode
  ;;   ("\\.vue\\'" . vue-mode)
  ;;   :hook
  ;;   (rx-vue-mode . eglot-ensure))
#+end_src

***** web-mode
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'web-mode)
  ;; ------------------
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.blade\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist
  '("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode))

  (custom-set-variables
   '(web-mode-code-indent-offset 2)
   '(web-mode-css-indent-offset 2)
   '(web-mode-markup-indent-offset 2)
   '(web-mode-enable-auto-indentation t)
   '(web-mode-enable-auto-pairing t)
   '(web-mode-enable-auto-closing t)
   '(web-mode-enable-auto-quoting t)
   '(web-mode-enable-current-column-highlight t)
   '(web-mode-enable-current-element-highlight t)
   '(web-mode-enable-html-entities-fontification t))
#+end_src

**** zig
#+begin_src emacs-lisp :tangle yes
  (straight-use-package '(zig-mode :type git :host github :repo "ziglang/zig-mode"))

  (unless (version< emacs-version "24")
    (autoload 'zig-mode "zig-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.zig\\’" . zig-mode)))
  (add-hook 'zig-mode-hook 'eglot-ensure)
#+end_src

*** Modes
**** sh-script
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; ------------------
  (leaf sh-script
    :doc ""
    :tag "built-in"
    :mode ("\\.sh\\’" . sh-mode)
    ;; :hook (shell-script-mode . lsp-mode)
    :hook (shell-script-mode . eglot-ensure)
    )
#+end_src

**** csv
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'csv-mode)
  ;; ------------------
  (leaf csv-mode
    :doc ""
    :url ""
    :mode ("\\.[cC][sS][vV]\\'" . csv-mode)
    :setq
    (csv-separators . '("," ";" "|" " ")))
#+end_src

**** dhall
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'dhall-mode)
  ;; ------------------
  (leaf dhall-mode
    :doc ""
    :url ""
    :mode
    ("\\.dhall\\'" . dhall-mode))
#+end_src

**** json
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'json-mode)
  ;; ------------------
  (leaf json-mode
    :doc ""
    :url ""
    :mode ("\\.json\\'" . json-mode))
#+end_src

**** markdown
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'markdown-mode)
  ;; ------------------
  (leaf markdown-mode
    :doc ""
    :url "https://jblevins.org/projects/markdown-mode/"
    :mode ("\\.\\(?:md\\|markdown\\|mkd\\)\\'" . markdown-mode))
#+end_src

**** toml
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'toml-mode)
  ;; ------------------
  (leaf toml-mode
    :doc ""
    :url ""
    :mode
    ("\\.toml\\'" . toml-mode))
#+end_src

**** yaml
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'yaml-mode)
  ;; ------------------
  (leaf yaml-mode
    :doc ""
    :url ""
    :mode
    ("\\.yaml\\'" . yaml-mode))
#+end_src

*** Syntax
**** flycheck
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'flycheck)
  ;; ------------------
  (leaf flycheck
    :doc "A modern on-the-fly syntax checking extension"
    :url "https://www.flycheck.org/en/latest/"
    :setq
    (flycheck-highlighting-mode . 'line)
    :config
    (progn
      (define-fringe-bitmap 'my-flycheck-fringe-indicator
	(vector #b00000000
		#b00000000
		#b00000000
		#b00000000
		#b00000000
		#b00000000
		#b00000000
		#b00011100
		#b00111110
		#b00111110
		#b00111110
		#b00011100
		#b00000000
		#b00000000
		#b00000000
		#b00000000
		#b00000000))

      (flycheck-define-error-level 'error
	:severity 2
	:overlay-category 'flycheck-error-overlay
	:fringe-bitmap 'my-flycheck-fringe-indicator
	:fringe-face 'flycheck-fringe-error)

      (flycheck-define-error-level 'warning
	:severity 1
	:overlay-category 'flycheck-warning-overlay
	:fringe-bitmap 'my-flycheck-fringe-indicator
	:fringe-face 'flycheck-fringe-warning)

      (flycheck-define-error-level 'info
	:severity 0
	:overlay-category 'flycheck-info-overlay
	:fringe-bitmap 'my-flycheck-fringe-indicator
	:fringe-face 'flycheck-fringe-info))
    :bind (("C-c e n" . flycheck-next-error)
	   ("C-c e p" . flycheck-previous-error)
	   ("C-c e l" . flycheck-list-error)))
#+end_src

**** flymake
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  ;; ------------------
  (leaf flymake
    :doc ""
    :url ""
    :tag "builtins"
    :hook (prog-mode)
    :bind (("C-c e d" . flymake-show-diagnostic)))
#+end_src

** ORG
*** org-mode
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package '(org :type built-in))
  ;; ------------------
  (leaf org
    :doc ""
    :tag ""
    :require ox
    :custom
    (org-directory                     . "~/doc/org/")
    ;; general settings
    (org-startup-with-inline-images    . (display-graphic-p))
    (org-startup-align-all-tables      . t)
    (org-use-speed-commands            . t)
    (org-use-fast-todo-selection       . 'expert)
    (org-fast-tag-selection-single-key . 'expert)
    (org-hide-emphasis-markers         . t)
    (org-adapt-indentation             . t)
    (org-confirm-babel-evaluate        . t)
    (org-pretty-entities               . t)
    (org-support-shift-select          . t)
    ;; src blocks
    (org-edit-src-content-indentation  . 2)
    (org-src-tab-acts-natively         . t)
    (org-src-fontify-natively          . t)
    (org-src-preserve-indentation      . nil)
    (org-src-window-setup              . 'split-window-below)
    (org-src-strip-leading-and-trailing-blank-lines . t)

    ;; modules
    ;; (org-modules . '(org-crypt
    ;;                  org-habit
    ;;                  org-tempo
    ;;                  org-protocol))

    ;; keywords
    (org-todo-keywords
     . '((sequence "IDEA(i)" "TODO(t)" "STARTED(s)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)")
         (sequence "|" "CANCELED(c)" "DELEGATED(l)" "SOMEDAY(f)")))
    :config
    (progn
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (shell . t)
         (lua . t)
         (css . t)
         (scheme . t)
         (js . t))))
    :hook
    ((org-mode-hook . org-indent-mode)
     (org-mode-hook . auto-fill-mode)))
#+end_src

*** org-capture
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  ;; ------------------
  (leaf org-capture
    :doc ""
    :url ""
    :bind ("C-c o c" . org-capture)
    :config
    (with-eval-after-load 'org-capture
      (setq denote-org-capture-specifiers "%l\n%i\n%?")
      (add-to-list 'org-capture-templates
                   '("n" "New note (with denote.el)" plain
                     (file denote-last-path)
                     #'denote-org-capture
                     :no-save t
                     :immediate-finish nil
                     :kill-buffer t
                     :jump-to-captured t))))
#+end_src

*** org-speed
#+begin_src emacs-lisp :tangle yes
  
#+end_src

*** org-superstar
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'org-superstar)
  ;; ------------------
  (leaf org-superstar
    :doc ""
    :url ""
    :custom
    (org-superstar-headline-bullets-list
     ;; . '("☰" "☷" "☵" "☲"  "☳" "☴"  "☶"  "☱")
     . '("◉" "●" "○" "○" "○" "○" "○")
     ;; . '("*" "**" "***" "****" "*****" "******" "*******" "********")
     )
    (org-superstar-leading-bullet . " ")
    :hook (org-mode-hook . org-superstar-mode))
#+end_src

*** org-toc
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'toc-org)
  ;; ------------------
  (leaf toc-org
    :doc ""
    :url "https://github.com/snosov1/toc-org"
    :after org
    :hook
    (org-mode-hook . toc-org-mode))
#+end_src

** OTHERS
*** Academic
**** Export
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'ox-epub)
  ;; ------------------
  (leaf ox-epub
    :doc ""
    :url ""
    :after org)

  (leaf ox-latex
    :doc "FIX: use org-reload before try to export. (why?)"
    :tag "built-in"
    :after org
    :custom
    (org-latex-default-figure-position . "H")
    (org-latex-listings                . t)
    (org-latex-listings                . 'minted)
    (org-latex-pdf-process
     . '("latexmk -shell-escape -bibtex -f -pdf %f"
         "bibtex %b"
         "pdflatex -interaction nonstopmode -output-directory %o %f"
         "pdflatex -interaction nonstopmode -output-directory %o %f"))
    :config
    (add-to-list 'org-latex-packages-alist
                 '("AUTO" "babel" t ("pdflatex")))
    (add-to-list 'org-latex-packages-alist
                 '("AUTO" "polyglossia" t ("xelatex" "lualatex"))))
#+end_src

**** Presentation
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  ;; (straight-use-package ')
  ;; ------------------
#+end_src

**** References
***** bibtex
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'helm-bibtex)
  ;; ------------------
  (leaf bibtex
    :doc "Manage bib references"
    :tag "built-in"
    :custom
    (bibtex-set-dialect . 'biblatex))

  (leaf helm-bibtex
    :doc "Allow you to search and manage your BibTeX bibliography"
    :url "https://github.com/tmalsburg/helm-bibtex"
    :custom
    (bibtex-completion-pdf-field    . "file")
    (bibtex-completion-pdf-symbol   . "⌘")
    (bibtex-completion-notes-symbol . "✎")
    (bibtex-completion-library-path . '("~/Zotero/storage/2I6J8Q2M"))
    (bibtex-completion-bibliography . '("~/Zotero/exports/ref.bib"))
    (bibtex-completion-notes-path   . "~/Zotero/notes"))
#+end_src

***** citar
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package
   '(citar :type git
           :host github
           :repo "emacs-citar/citar"
           :includes (citar-org)))
  ;; ------------------

  (leaf citar
    :doc "BibTeX, BibLaTeX, and CSL JSON bibliographic data, and LaTeX, markdown, and org-cite editing support."
    :url "https://github.com/bdarcus/citar"
    :custom
    (org-cite-global-bibliography . '("~/Zotero/exports/ref.bib"))
    (citar-bibliography           . org-cite-global-bibliography)
    (org-cite-insert-processor    . 'citar)
    (org-cite-follow-processor    . 'citar)
    (org-cite-activate-processor  . 'citar)
    (org-cite-export-processor    . '((latex . biblatex)
                                      ;; (latex . (csl "associacao-brasileira-de-normas-tecnicas.csl"))
                                      (md    . (csl "associacao-brasileira-de-normas-tecnicas.csl"))
                                      (odt   . (csl "associacao-brasileira-de-normas-tecnicas.csl"))
                                      (t     . (csl "modern-language-association.cls"))))
    :bind
    (("C-c r i" . org-cite-insert)
     ("C-c r c" . citar-insert-citation)
     ("C-c r r" . citar-insert-reference)
     ("C-c r n" . citar-open-note)
     (:minibuffer-local-map
      ("M-b" . citar-insert-preset))))
#+end_src

***** org-ref
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package 'org-ref)
  ;; ------------------
  (leaf org-ref
    :doc "Citations, cross-references, indexes, glossaries and bibtex utilities for org-mode"
    :url "https://github.com/jkitchin/org-ref"
    :require
    (org-ref-helm
     org-ref-arxiv
     org-ref-pdf
     org-ref-bibtex
     org-ref-isbn
     org-ref-pubmed
     org-ref-scopus
     org-ref-url-utils
     org-ref-wos
     doi-utils)
    :custom
    (org-ref-insert-link-function  . 'org-ref-insert-link-hydra/body)
    (org-ref-insert-cite-function  . 'org-ref-cite-insert-helm)
    (org-ref-insert-label-function . 'org-ref-insert-label-link)
    (org-ref-insert-ref-function   . 'org-ref-insert-ref-link)
    (org-ref-cite-onclick-function . (lambda (_) (org-ref-citation-hydra/body)))
    :bind (("C-c r h" . 'org-ref-insert-link-hydra/body)
           ("C-c r i" . 'org-ref-insert-link)))
#+end_src

*** Epub/Pdf
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package 'nov)
  (straight-use-package 'pdf-tools)
  ;; ------------------
  (leaf nov
    :doc ""
    :url ""
    :require nov
    :mode ("\\.epub\\'" . nov-mode)
    :custom
    (nov-text-width . 72)
    :hook (nov-mode-hook
           . (lambda ()
               (face-remap-add-relative
                'variable-pitch :family "Liberation Serif" :height 1.2))))

  (require 'pdf-tools)
  (custom-set-variables
   '(pdf-view-midnight-colors '("white smoke" . "gray5"))
   '(pdf-misc-print-programm-args '("-o media=A4" "-o fitplot"))
   '(pdf-view-display-size 'fit-page))
#+end_src

*** Denote
#+begin_src emacs-lisp :tangle yes
  ;; ------------------
  (straight-use-package
   '(denote :type   git
            :host   github
            :branch "main"
            :repo   "protesilaos/denote"))
  ;; ------------------
  (leaf denote
    :doc ""
    :url ""
    ;; :require (denote-org-capture)
    :hook ((find-file-hook . denote-link-buttonize-buffer)
           (dired-mode-hook . denote-dired-mode))
    :custom
    (denote-directory . "~/doc/denote") ; prefer to use .dir-locals.el file.
    (denote-known-keywords . '("nixos"))      ; also add this from .dir-locals.el file.
    (denote-file-type . nil)
    :bind
    (("C-c n j" . my-denote-journal)
     ("C-c n n" . denote)
     ("C-c n N" . denote-type)
     ("C-c n d" . denote-date)
     ("C-c n s" . denote-subdirectory)
     ("C-c n i" . denote-link)
     ("C-c n I" . denote-link-add-links)
     ("C-c n l" . denote-link-find-file)
     ("C-c n b" . denote-link-backlinks)
     ("C-c n r" . denote-dired-rename-file)))

  (defun my-denote-journal ()
    "Create an entry tagged ‘journal’, while prompting for a title."
    (interactive)
    (denote
     (denote--title-prompt) '("journal")))
#+end_src

*** GkRoam
#+begin_src emacs-lisp :tangle no
  ;; ------------------
  (straight-use-package
   '(gkroam :type   git
            :host   github
            :branch "develop"
            :repo   "Kinneyzhang/gkroam"))
  ;; ------------------
  (leaf gkroam
    :doc "A lightweight Roam Research replica"
    :url "https://github.com/Kinneyzhang/gkroam"
    :require gkroam
    :custom
    (gkroam-root-dir             . "~/Nextcloud/org/gkroam")
    (gkroam-prettify-page-p      . t)
    (gkroam-show-brackets-p      . t)
    (gkroam-use-default-filename . t)
    (gkroam-window-margin        . 0)
    (gkroam-title-height         . 200)
    :hook
    (after-init-hook . gkroam-mode)
    :bind
    (:gkroam-mode-map
     (("C-c r I" . gkroam-index)
      ("C-c r d" . gkroam-daily)
      ("C-c r D" . gkroam-delete)
      ("C-c r f" . gkroam-find)
      ("C-c r i" . gkroam-insert)
      ("C-c r n" . gkroam-dwim)
      ("C-c r e" . gkroam-link-edit)
      ("C-c r u" . gkroam-show-unlinked)
      ("C-c r p" . gkroam-toggle-prettify)
      ("C-c r t" . gkroam-toggle-brackets)
      ("C-c r R" . gkroam-rebuild-caches)
      ("C-c r g" . gkroam-update))))
#+end_src

** FOOTER
#+begin_src emacs-lisp :tangle yes
  ;; config.el ends here.
#+end_src

* REFERENCES
** LITERATE
- https://github.com/hlissner/doom-emacs

** MODULAR
- https://github.com/DogLooksGood/dogEmacs

** SINGLE
- https://github.com/olivertaylor/dotfiles/tree/2bd57060c6823712ecaa08748aca910289c9cfb8/emacs
